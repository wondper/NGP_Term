#pragma once
#include "Timer.h"
#include "Scene.h"
#include "Player.h"
#include "ShadowMap.h"


class CGameFramework
{
private:
	HINSTANCE m_hInstance;
	HWND m_hWnd;
	int m_nWndClientWidth;
	int m_nWndClientHeight;

	ComPtr<IDXGIFactory4> m_pdxgiFactory;
	//DXGI 팩토리 인터페이스에 대한 포인터이다.

	ComPtr<IDXGISwapChain3> m_pdxgiSwapChain;
	//스왑 체인 인터페이스에 대한 포인터이다. 주로 디스플레이를 제어하기 위하여 필요하다.

	ComPtr<ID3D12Device> m_pd3dDevice;
	//Direct3D 디바이스 인터페이스에 대한 포인터이다. 주로 리소스를 생성하기 위하여 필요하다.

	bool m_bMsaa4xEnable = false;
	UINT m_nMsaa4xQualityLevels = 0;
	//MSAA 다중 샘플링을 활성화하고 다중 샘플링 레벨을 설정한다.
	
	static const UINT m_nSwapChainBuffers = 2;
	//ComPtr<ID3D12Resource> m_ppd3dSwapChainBackBuffers[m_nSwapChainBuffers];
	//스왑 체인의 후면 버퍼의 개수이다.

	UINT m_nSwapChainBufferIndex;
	//현재 스왑 체인의 후면 버퍼 인덱스이다.

	ComPtr<ID3D12Resource> m_ppd3dRenderTargetBuffers[m_nSwapChainBuffers];
	ComPtr<ID3D12DescriptorHeap> m_pd3dRtvDescriptorHeap;
	UINT m_nRtvDescriptorIncrementSize;
	//렌더 타겟 버퍼, 서술자 힙 인터페이스 포인터, 렌더 타겟 서술자 원소의 크기이다.

	ComPtr<ID3D12Resource> m_pd3dDepthStencilBuffer;
	ComPtr<ID3D12DescriptorHeap> m_pd3dDsvDescriptorHeap;
	UINT m_nDsvDescriptorIncrementSize;
	//깊이-스텐실 버퍼, 서술자 힙 인터페이스 포인터, 깊이-스텐실 서술자 원소의 크기이다.

	ComPtr<ID3D12Resource> m_pd3dShaderResourceBuffer;
	ComPtr<ID3D12DescriptorHeap> m_pd3dSrvDescriptorHeap;
	UINT m_nSrvDescriptorIncrementSize;
	//쉐이더 리소스 버퍼, 서술자 힙 인터페이스 포인터, 쉐이더 리소스 서술자 원소의 크기이다.

	ComPtr<ID3D12CommandQueue> m_pd3dCommandQueue;
	ComPtr<ID3D12CommandAllocator> m_pd3dCommandAllocator;
	ComPtr<ID3D12GraphicsCommandList> m_pd3dCommandList;
	//명령 큐, 명령 할당자, 명령 리스트 인터페이스 포인터이다.

	ComPtr<ID3D12PipelineState> m_pd3dPipelineState;
	//그래픽스 파이프라인 상태 객체에 대한 인터페이스 포인터이다.
	ComPtr<ID3D12Fence> m_pd3dFence;
	UINT64 m_nFenceValue;
	HANDLE m_hFenceEvent;
	//펜스 인터페이스 포인터, 펜스의 값, 이벤트 핸들이다.

	//다음은 게임 프레임워크에서 사용할 타이머이다.
	CGameTimer m_GameTimer;

	//다음은 프레임 레이트를 주 윈도우의 캡션에 출력하기 위한 문자열이다.
	_TCHAR m_pszFrameRate[50];

	//물리엔진 인터페이스
	std::unique_ptr<btDefaultCollisionConfiguration> m_pbtCollisionConfiguration;
	std::unique_ptr<btCollisionDispatcher> m_pbtDispatcher;
	std::unique_ptr<btBroadphaseInterface> m_pbtOverlappingPairCache;
	std::unique_ptr<btSequentialImpulseConstraintSolver> m_pbtSolver;
	std::unique_ptr<btDiscreteDynamicsWorld> m_pbtDynamicsWorld;
	btAlignedObjectArray<btCollisionShape*> m_btCollisionShapes;

	UINT64 m_nFenceValues[m_nSwapChainBuffers];
	std::unique_ptr<CScene> m_pScene;

	std::unique_ptr<CShadowMap> m_pShadowMap[3];

public:
	CCamera* m_pCamera = NULL;

	//플레이어 객체에 대한 포인터이다.
	std::shared_ptr<CVehiclePlayer> m_pPlayer;
	std::shared_ptr<CGameObject> m_pOtherPlayer[2];
	std::shared_ptr<CGameObject> m_pOtherPlayerBullet[2];

	//마지막으로 마우스 버튼을 클릭할 때의 마우스 커서의 위치이다.
	POINT m_ptOldCursorPos;

public:
	CGameFramework();
	~CGameFramework();

	CGameTimer GetGameTimer() { return m_GameTimer; }

	bool OnCreate(HINSTANCE hInstance, HWND hMainWnd);
	//프레임워크를 초기화하는 함수이다(주 윈도우가 생성되면 호출된다).

	void OnDestroy();
	void CreateSwapChain();
	void CreateRtvAndDsvDescriptorHeaps();
	void BuildDescriptorHeaps();
	void CreateDirect3DDevice();
	void CreateCommandQueueAndList();
	//스왑 체인, 디바이스, 서술자 힙, 명령 큐/할당자/리스트를 생성하는 함수이다.

	void CreateRenderTargetViews();
	void CreateDepthStencilView();
	//렌더 타겟 뷰와 깊이-스텐실 뷰를 생성하는 함수이다.

	void BuildObjects();
	void ReleaseObjects();
	//렌더링할 메쉬와 게임 객체를 생성하고 소멸하는 함수이다.

	//프레임워크의 핵심(사용자 입력, 애니메이션, 렌더링)을 구성하는 함수이다.
	void ProcessInput();
	void Update();
	void FrameAdvance();

	//물리엔진 초기화
	void BulletInit();

	XMFLOAT3 GetPlayerPosition() { return m_pPlayer->GetPosition(); }
	XMFLOAT4 GetPlayerRotation()
	{
		XMFLOAT4X4 transform = m_pPlayer->GetWorldTransformMatrix();
		float pitch = XMScalarASin(-transform._32);

		XMVECTOR from(XMVectorSet(transform._12, transform._31, 0.0f, 0.0f));
		XMVECTOR to(XMVectorSet(transform._22, transform._33, 0.0f, 0.0f));
		XMVECTOR res(XMVectorATan2(from, to));

		float roll = XMVectorGetX(res);
		float yaw = XMVectorGetY(res);

		auto quaternion = m_pPlayer->GetVehicle()->getChassisWorldTransform().getRotation();

		return XMFLOAT4(quaternion.x(), quaternion.y(), quaternion.z(), quaternion.w());
	}
	int GetPlayerLife() { return m_pPlayer->m_nLife; }
	std::shared_ptr<CBullet> GetPlayerBullet() { return m_pPlayer->GetBullet(); }

	//CPU와 GPU를 동기화하는 함수이다.
	void WaitForGpuComplete();

	void OnProcessingMouseMessage(HWND hWnd, UINT nMessageID, WPARAM wParam, LPARAM lParam);
	void OnProcessingKeyboardMessage(HWND hWnd, UINT nMessageID, WPARAM wParam, LPARAM lParam);
	LRESULT CALLBACK OnProcessingWindowMessage(HWND hWnd, UINT nMessageID, WPARAM wParam, LPARAM lParam);
	//윈도우의 메시지(키보드, 마우스 입력)를 처리하는 함수이다.

	void ChangeSwapChainState();
	void MoveToNextFrame();

// 게임, 네트워크와 관련된 변수와 함수는 아래에 작성한다.
private:
	SOCKET m_clientSocket;

public:
	void InitNetworkSocket(CVehiclePlayer* pPlayer) { }
};